{
  "content": "(function() {\n    const { registerBlockType } = wp.blocks;\n    const { RichText, InspectorControls, MediaUpload, MediaUploadCheck, useBlockProps } = wp.blockEditor;\n    const { Button, PanelBody, PanelRow, ToggleControl, SelectControl, ColorPicker, TextControl, BaseControl, RangeControl } = wp.components;\n    const { Fragment, createElement, useState } = wp.element;\n    const { __ } = wp.i18n;\n\n    registerBlockType('julianboelen/section-text-image', {\n        apiVersion: 2,\n        title: __('Section Text Image', 'julianboelen'),\n        icon: 'align-pull-left',\n        category: 'julianboelen-blocks',\n        description: __('A sophisticated two-column section with text content and image, featuring responsive design and advanced customization options', 'julianboelen'),\n        supports: {\n            html: false,\n            anchor: true,\n            customClassName: true,\n            inserter: true,\n            multiple: true,\n            reusable: true,\n            spacing: {\n                padding: true,\n                margin: true\n            },\n            typography: {\n                fontSize: true,\n                lineHeight: true\n            }\n        },\n        \n        attributes: {\n            smallHeading: { type: 'string', default: 'Dit is Starapple:' },\n            mainHeading: { type: 'string', default: 'De specialist achter de match' },\n            description: { type: 'string', default: 'StarApple is geen standaard bemiddelaar. Bij ons draait het om de perfecte interim match. Wij combineren inhoudelijke IT-expertise met een persoonlijke, gedreven aanpak. Of je nu zoekt naar de juiste interim opdracht of tijdelijke versterking, bij ons weet je precies wie je aan de lijn hebt en waar je aan toe bent. Leer ons kennen.' },\n            buttonText: { type: 'string', default: 'Over ons' },\n            buttonUrl: { type: 'string', default: '#' },\n            buttonTarget: { type: 'string', default: '' },\n            buttonRel: { type: 'string', default: '' },\n            showButton: { type: 'boolean', default: true },\n            buttonBackgroundType: { type: 'string', default: 'primary', enum: ['primary', 'secondary', 'custom'] },\n            customButtonColor: { type: 'string', default: '#9333ea' },\n            imageUrl: { type: 'string', default: 'https://images.unsplash.com/photo-1621155346337-1d19476ba7d6?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w4MTAzMDV8MHwxfHNlYXJjaHw0fHxpbWFnZXxlbnwwfDB8fHwxNzU5NjYzODYwfDA&ixlib=rb-4.1.0&q=80&w=1080&w=1200&h=800&fit=crop' },\n            imageAlt: { type: 'string', default: 'Team collaboration' },\n            imageId: { type: 'number', default: 0 },\n            imagePosition: { type: 'string', default: 'right', enum: ['left', 'right'] },\n            backgroundColor: { type: 'string', default: '#f9fafb' },\n            textColor: { type: 'string', default: '#1f2937' },\n            smallHeadingColor: { type: 'string', default: '#4b5563' },\n            descriptionColor: { type: 'string', default: '#374151' },\n            contentAlignment: { type: 'string', default: 'left', enum: ['left', 'center'] },\n            imageRoundness: { type: 'string', default: '3xl', enum: ['none', 'lg', 'xl', '2xl', '3xl', 'full'] },\n            columnGap: { type: 'string', default: '12', enum: ['8', '10', '12', '16'] },\n            verticalPadding: { type: 'string', default: '12', enum: ['8', '12', '16', '20'] },\n            showShadow: { type: 'boolean', default: true }\n        },\n\n        edit: function(props) {\n            const { attributes, setAttributes } = props;\n            const { \n                smallHeading,\n                mainHeading, \n                description, \n                buttonText, \n                buttonUrl, \n                buttonTarget, \n                buttonRel, \n                showButton, \n                buttonBackgroundType, \n                customButtonColor,\n                imageUrl,\n                imageAlt,\n                imageId,\n                imagePosition,\n                backgroundColor,\n                textColor,\n                smallHeadingColor,\n                descriptionColor,\n                contentAlignment,\n                imageRoundness,\n                columnGap,\n                verticalPadding,\n                showShadow\n            } = attributes;\n\n            const [showLinkControl, setShowLinkControl] = useState(false);\n\n            // SOPHISTICATED helper functions for dynamic styling\n            const getButtonBackgroundColor = () => {\n                switch(buttonBackgroundType) {\n                    case 'primary': \n                        return 'var(--wp--preset--color--primary, #9333ea)';\n                    case 'secondary': \n                        return 'var(--wp--preset--color--secondary, #84eb93)';\n                    case 'custom': \n                        return customButtonColor;\n                    default: \n                        return '#9333ea';\n                }\n            };\n\n            const getButtonTextColor = () => {\n                if (buttonBackgroundType === 'secondary') {\n                    return '#1f2937';\n                }\n                return buttonBackgroundType === 'custom' ? getContrastColor(customButtonColor) : '#ffffff';\n            };\n\n            const getContrastColor = (hexColor) => {\n                const hex = hexColor.replace('#', '');\n                const r = parseInt(hex.substr(0, 2), 16);\n                const g = parseInt(hex.substr(2, 2), 16);\n                const b = parseInt(hex.substr(4, 2), 16);\n                const brightness = (r * 299 + g * 587 + b * 114) / 1000;\n                return brightness > 128 ? '#1f2937' : '#ffffff';\n            };\n\n            const getRoundnessClass = () => {\n                const roundnessMap = {\n                    'none': 'rounded-none',\n                    'lg': 'rounded-lg',\n                    'xl': 'rounded-xl',\n                    '2xl': 'rounded-2xl',\n                    '3xl': 'rounded-3xl',\n                    'full': 'rounded-full'\n                };\n                return roundnessMap[imageRoundness] || 'rounded-3xl';\n            };\n\n            const onSelectImage = (media) => {\n                setAttributes({\n                    imageUrl: media.url,\n                    imageId: media.id,\n                    imageAlt: media.alt || 'Image'\n                });\n            };\n\n            const onRemoveImage = () => {\n                setAttributes({\n                    imageUrl: '',\n                    imageId: 0,\n                    imageAlt: ''\n                });\n            };\n\n            // ADVANCED editor preview with realistic styling\n            const textColumn = createElement('div', { \n                className: 'flex flex-col justify-center space-y-6',\n                style: { textAlign: contentAlignment }\n            },\n                createElement('div', null,\n                    createElement(RichText, {\n                        tagName: 'p',\n                        className: 'text-base sm:text-lg font-normal',\n                        style: { color: smallHeadingColor },\n                        value: smallHeading,\n                        onChange: (value) => setAttributes({ smallHeading: value }),\n                        placeholder: __('Enter small heading...', 'julianboelen')\n                    })\n                ),\n                \n                createElement('div', null,\n                    createElement(RichText, {\n                        tagName: 'h1',\n                        className: 'text-3xl sm:text-4xl lg:text-5xl font-bold leading-tight',\n                        style: { color: textColor },\n                        value: mainHeading,\n                        onChange: (value) => setAttributes({ mainHeading: value }),\n                        placeholder: __('Enter main heading...', 'julianboelen')\n                    })\n                ),\n                \n                createElement('div', null,\n                    createElement(RichText, {\n                        tagName: 'p',\n                        className: 'text-base sm:text-lg leading-relaxed',\n                        style: { color: descriptionColor },\n                        value: description,\n                        onChange: (value) => setAttributes({ description: value }),\n                        placeholder: __('Enter description...', 'julianboelen')\n                    })\n                ),\n                \n                showButton && createElement('div', { className: 'pt-2' },\n                    createElement('div', {\n                        className: 'inline-block px-10 py-4 rounded-full font-semibold text-base sm:text-lg shadow-md transition-all duration-300 cursor-pointer',\n                        style: {\n                            backgroundColor: getButtonBackgroundColor(),\n                            color: getButtonTextColor()\n                        },\n                        contentEditable: true,\n                        suppressContentEditableWarning: true,\n                        onBlur: (e) => setAttributes({ buttonText: e.target.textContent })\n                    }, buttonText)\n                )\n            );\n\n            const imageColumn = createElement('div', { className: 'flex justify-center lg:justify-end' },\n                createElement('div', { className: 'w-full max-w-2xl' },\n                    createElement(MediaUploadCheck, null,\n                        createElement(MediaUpload, {\n                            onSelect: onSelectImage,\n                            allowedTypes: ['image'],\n                            value: imageId,\n                            render: ({ open }) => {\n                                return imageUrl ? \n                                    createElement('div', { \n                                        className: 'relative group',\n                                        style: { cursor: 'pointer' }\n                                    },\n                                        createElement('img', {\n                                            src: imageUrl,\n                                            alt: imageAlt,\n                                            className: `w-full h-auto object-cover ${getRoundnessClass()} ${showShadow ? 'shadow-lg' : ''}`,\n                                            onClick: open,\n                                            style: { maxHeight: '500px' }\n                                        }),\n                                        createElement('div', {\n                                            className: 'absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity'\n                                        },\n                                            createElement(Button, {\n                                                onClick: onRemoveImage,\n                                                isDestructive: true,\n                                                isSmall: true\n                                            }, __('Remove', 'julianboelen'))\n                                        )\n                                    ) :\n                                    createElement('div', {\n                                        className: `w-full h-64 flex items-center justify-center bg-gray-200 ${getRoundnessClass()} cursor-pointer hover:bg-gray-300 transition-colors`,\n                                        onClick: open\n                                    },\n                                        createElement('span', { className: 'text-gray-500' }, __('Upload Image', 'julianboelen'))\n                                    );\n                            }\n                        })\n                    )\n                )\n            );\n\n            return createElement(Fragment, null,\n                // SOPHISTICATED InspectorControls with multiple panels\n                createElement(InspectorControls, null,\n                    createElement(PanelBody, { \n                        title: __('Content Settings', 'julianboelen'), \n                        initialOpen: true \n                    },\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(TextControl, {\n                                    label: __('Small Heading', 'julianboelen'),\n                                    value: smallHeading,\n                                    onChange: (value) => setAttributes({ smallHeading: value }),\n                                    help: __('Text displayed above the main heading', 'julianboelen')\n                                })\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(TextControl, {\n                                    label: __('Image Alt Text', 'julianboelen'),\n                                    value: imageAlt,\n                                    onChange: (value) => setAttributes({ imageAlt: value }),\n                                    help: __('Describe the image for accessibility', 'julianboelen')\n                                })\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(SelectControl, {\n                                    label: __('Content Alignment', 'julianboelen'),\n                                    value: contentAlignment,\n                                    options: [\n                                        { label: __('Left', 'julianboelen'), value: 'left' },\n                                        { label: __('Center', 'julianboelen'), value: 'center' }\n                                    ],\n                                    onChange: (value) => setAttributes({ contentAlignment: value })\n                                })\n                            )\n                        )\n                    ),\n                    \n                    createElement(PanelBody, { \n                        title: __('Layout Settings', 'julianboelen'), \n                        initialOpen: false \n                    },\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(SelectControl, {\n                                    label: __('Image Position', 'julianboelen'),\n                                    value: imagePosition,\n                                    options: [\n                                        { label: __('Right', 'julianboelen'), value: 'right' },\n                                        { label: __('Left', 'julianboelen'), value: 'left' }\n                                    ],\n                                    onChange: (value) => setAttributes({ imagePosition: value })\n                                })\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(SelectControl, {\n                                    label: __('Column Gap', 'julianboelen'),\n                                    value: columnGap,\n                                    options: [\n                                        { label: __('Small (2rem)', 'julianboelen'), value: '8' },\n                                        { label: __('Medium (2.5rem)', 'julianboelen'), value: '10' },\n                                        { label: __('Large (3rem)', 'julianboelen'), value: '12' },\n                                        { label: __('Extra Large (4rem)', 'julianboelen'), value: '16' }\n                                    ],\n                                    onChange: (value) => setAttributes({ columnGap: value })\n                                })\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(SelectControl, {\n                                    label: __('Vertical Padding', 'julianboelen'),\n                                    value: verticalPadding,\n                                    options: [\n                                        { label: __('Small (2rem)', 'julianboelen'), value: '8' },\n                                        { label: __('Medium (3rem)', 'julianboelen'), value: '12' },\n                                        { label: __('Large (4rem)', 'julianboelen'), value: '16' },\n                                        { label: __('Extra Large (5rem)', 'julianboelen'), value: '20' }\n                                    ],\n                                    onChange: (value) => setAttributes({ verticalPadding: value })\n                                })\n                            )\n                        )\n                    ),\n                    \n                    createElement(PanelBody, { \n                        title: __('Design Settings', 'julianboelen'), \n                        initialOpen: false \n                    },\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(BaseControl, {\n                                    label: __('Background Color', 'julianboelen')\n                                },\n                                    createElement(ColorPicker, {\n                                        color: backgroundColor,\n                                        onChange: (color) => setAttributes({ backgroundColor: color.hex }),\n                                        disableAlpha: false\n                                    })\n                                )\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%', marginTop: '20px' } },\n                                createElement(BaseControl, {\n                                    label: __('Main Heading Color', 'julianboelen')\n                                },\n                                    createElement(ColorPicker, {\n                                        color: textColor,\n                                        onChange: (color) => setAttributes({ textColor: color.hex }),\n                                        disableAlpha: false\n                                    })\n                                )\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%', marginTop: '20px' } },\n                                createElement(BaseControl, {\n                                    label: __('Small Heading Color', 'julianboelen')\n                                },\n                                    createElement(ColorPicker, {\n                                        color: smallHeadingColor,\n                                        onChange: (color) => setAttributes({ smallHeadingColor: color.hex }),\n                                        disableAlpha: false\n                                    })\n                                )\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%', marginTop: '20px' } },\n                                createElement(BaseControl, {\n                                    label: __('Description Color', 'julianboelen')\n                                },\n                                    createElement(ColorPicker, {\n                                        color: descriptionColor,\n                                        onChange: (color) => setAttributes({ descriptionColor: color.hex }),\n                                        disableAlpha: false\n                                    })\n                                )\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%', marginTop: '20px' } },\n                                createElement(SelectControl, {\n                                    label: __('Image Roundness', 'julianboelen'),\n                                    value: imageRoundness,\n                                    options: [\n                                        { label: __('None', 'julianboelen'), value: 'none' },\n                                        { label: __('Large', 'julianboelen'), value: 'lg' },\n                                        { label: __('Extra Large', 'julianboelen'), value: 'xl' },\n                                        { label: __('2X Large', 'julianboelen'), value: '2xl' },\n                                        { label: __('3X Large', 'julianboelen'), value: '3xl' },\n                                        { label: __('Full', 'julianboelen'), value: 'full' }\n                                    ],\n                                    onChange: (value) => setAttributes({ imageRoundness: value })\n                                })\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement(ToggleControl, {\n                                label: __('Show Image Shadow', 'julianboelen'),\n                                checked: showShadow,\n                                onChange: (value) => setAttributes({ showShadow: value })\n                            })\n                        )\n                    ),\n                    \n                    createElement(PanelBody, { \n                        title: __('Button Settings', 'julianboelen'), \n                        initialOpen: false \n                    },\n                        createElement(PanelRow, null,\n                            createElement(ToggleControl, {\n                                label: __('Show Button', 'julianboelen'),\n                                checked: showButton,\n                                onChange: (value) => setAttributes({ showButton: value })\n                            })\n                        ),\n                        showButton && createElement(Fragment, null,\n                            createElement(PanelRow, null,\n                                createElement('div', { style: { width: '100%' } },\n                                    createElement(TextControl, {\n                                        label: __('Button Text', 'julianboelen'),\n                                        value: buttonText,\n                                        onChange: (value) => setAttributes({ buttonText: value })\n                                    })\n                                )\n                            ),\n                            createElement(PanelRow, null,\n                                createElement('div', { style: { width: '100%' } },\n                                    createElement(TextControl, {\n                                        label: __('Button URL', 'julianboelen'),\n                                        value: buttonUrl,\n                                        onChange: (value) => setAttributes({ buttonUrl: value }),\n                                        type: 'url'\n                                    })\n                                )\n                            ),\n                            createElement(PanelRow, null,\n                                createElement('div', { style: { width: '100%' } },\n                                    createElement(ToggleControl, {\n                                        label: __('Open in New Tab', 'julianboelen'),\n                                        checked: buttonTarget === '_blank',\n                                        onChange: (value) => {\n                                            setAttributes({\n                                                buttonTarget: value ? '_blank' : '',\n                                                buttonRel: value ? 'noopener noreferrer' : ''\n                                            });\n                                        }\n                                    })\n                                )\n                            ),\n                            createElement(PanelRow, null,\n                                createElement('div', { style: { width: '100%' } },\n                                    createElement(SelectControl, {\n                                        label: __('Button Background', 'julianboelen'),\n                                        value: buttonBackgroundType,\n                                        options: [\n                                            { label: __('Primary', 'julianboelen'), value: 'primary' },\n                                            { label: __('Secondary', 'julianboelen'), value: 'secondary' },\n                                            { label: __('Custom', 'julianboelen'), value: 'custom' }\n                                        ],\n                                        onChange: (value) => setAttributes({ buttonBackgroundType: value })\n                                    })\n                                )\n                            ),\n                            buttonBackgroundType === 'custom' && createElement(PanelRow, null,\n                                createElement('div', { style: { width: '100%' } },\n                                    createElement(BaseControl, {\n                                        label: __('Custom Button Color', 'julianboelen')\n                                    },\n                                        createElement(ColorPicker, {\n                                            color: customButtonColor,\n                                            onChange: (color) => setAttributes({ customButtonColor: color.hex }),\n                                            disableAlpha: false\n                                        })\n                                    )\n                                )\n                            )\n                        )\n                    )\n                ),\n                \n                // PROFESSIONAL editor preview with realistic styling\n                createElement('section', { \n                    ...useBlockProps({\n                        className: `section-text-image-block-preview py-${verticalPadding} px-4 sm:px-6 lg:px-8`,\n                        style: { \n                            backgroundColor: backgroundColor,\n                            border: '2px dashed #ccc',\n                            borderRadius: '8px'\n                        }\n                    })\n                },\n                    createElement('div', { className: 'max-w-7xl mx-auto' },\n                        createElement('div', { \n                            className: `grid grid-cols-1 lg:grid-cols-2 gap-${columnGap} items-center`,\n                            style: {\n                                gridTemplateColumns: imagePosition === 'left' ? 'auto' : '1fr 1fr'\n                            }\n                        },\n                            imagePosition === 'left' ? [\n                                createElement('div', { key: 'image', className: 'order-1 lg:order-1' }, imageColumn),\n                                createElement('div', { key: 'text', className: 'order-2 lg:order-2' }, textColumn)\n                            ] : [\n                                createElement('div', { key: 'text', className: 'order-2 lg:order-1' }, textColumn),\n                                createElement('div', { key: 'image', className: 'order-1 lg:order-2' }, imageColumn)\n                            ]\n                        )\n                    )\n                )\n            );\n        },\n\n        save: function() {\n            return null; // Server-side rendering\n        }\n    });\n})();"
}