{
  "content": "(function() {\n    const { registerBlockType } = wp.blocks;\n    const { RichText, InspectorControls, MediaUpload, MediaUploadCheck, useBlockProps } = wp.blockEditor;\n    const { Button, PanelBody, PanelRow, ToggleControl, RangeControl, SelectControl, ColorPicker, TextControl, TextareaControl, BaseControl, IconButton, Toolbar, ToolbarButton } = wp.components;\n    const { Fragment, createElement, useState } = wp.element;\n    const { __ } = wp.i18n;\n\n    registerBlockType('julianboelen/section-process', {\n        apiVersion: 2,\n        title: __('Section Process', 'julianboelen'),\n        icon: 'list-view',\n        category: 'julianboelen-blocks',\n        description: __('A streamlined process section with customizable step cards', 'julianboelen'),\n        supports: {\n            html: false,\n            anchor: true,\n            customClassName: true,\n            inserter: true,\n            multiple: true,\n            reusable: true,\n            spacing: {\n                padding: true,\n                margin: true\n            },\n            typography: {\n                fontSize: true,\n                lineHeight: true\n            },\n            color: {\n                background: true,\n                text: true\n            }\n        },\n        \n        attributes: {\n            sectionTitle: { type: 'string', default: 'Een gestroomlijnd proces' },\n            backgroundColor: { type: 'string', default: '#f9fafb' },\n            titleColor: { type: 'string', default: '#111827' },\n            cardBackgroundColor: { type: 'string', default: '#ffffff' },\n            cardTextColor: { type: 'string', default: '#374151' },\n            cardTitleColor: { type: 'string', default: '#111827' },\n            enableHoverEffect: { type: 'boolean', default: true },\n            columnsDesktop: { type: 'number', default: 4 },\n            columnsTablet: { type: 'number', default: 2 },\n            columnsMobile: { type: 'number', default: 1 },\n            cardGap: { type: 'string', default: '6' },\n            processSteps: {\n                type: 'array',\n                default: [\n                    {\n                        id: 'step-1',\n                        stepNumber: '01',\n                        title: 'Solliciteren',\n                        description: 'Solliciteer door jouw CV of Linkedin profiel op te sturen of direct op een vacature te reageren.',\n                        imageUrl: 'https://images.unsplash.com/photo-1595147389795-37094173bfd8?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w4MTAzMDV8MHwxfHNlYXJjaHwzfHxpbWFnZXxlbnwwfDB8fHwxNzU5NjYzODYwfDA&ixlib=rb-4.1.0&q=80&w=1080&w=800&h=600&fit=crop',\n                        imageAlt: 'Solliciteren',\n                        imageId: null\n                    },\n                    {\n                        id: 'step-2',\n                        stepNumber: '02',\n                        title: 'Profiel opstellen',\n                        description: 'Solliciteer door jouw CV of Linkedin profiel op te sturen of direct op een vacature te reageren.',\n                        imageUrl: 'https://images.unsplash.com/photo-1595147389795-37094173bfd8?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w4MTAzMDV8MHwxfHNlYXJjaHwzfHxpbWFnZXxlbnwwfDB8fHwxNzU5NjYzODYwfDA&ixlib=rb-4.1.0&q=80&w=1080&w=800&h=600&fit=crop',\n                        imageAlt: 'Profiel opstellen',\n                        imageId: null\n                    },\n                    {\n                        id: 'step-3',\n                        stepNumber: '03',\n                        title: 'Op gesprek',\n                        description: 'Solliciteer door jouw CV of Linkedin profiel op te sturen of direct op een vacature te reageren.',\n                        imageUrl: 'https://images.unsplash.com/photo-1488372759477-a7f4aa078cb6?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w4MTAzMDV8MHwxfHNlYXJjaHw1fHxpbWFnZXxlbnwwfDB8fHwxNzU5NjYzODYwfDA&ixlib=rb-4.1.0&q=80&w=1080&w=800&h=600&fit=crop',\n                        imageAlt: 'Op gesprek',\n                        imageId: null\n                    },\n                    {\n                        id: 'step-4',\n                        stepNumber: '04',\n                        title: 'Aan de slag!',\n                        description: 'Solliciteer door jouw CV of Linkedin profiel op te sturen of direct op een vacature te reageren.',\n                        imageUrl: 'https://images.unsplash.com/photo-1595147389795-37094173bfd8?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w4MTAzMDV8MHwxfHNlYXJjaHwzfHxpbWFnZXxlbnwwfDB8fHwxNzU5NjYzODYwfDA&ixlib=rb-4.1.0&q=80&w=1080&w=800&h=600&fit=crop',\n                        imageAlt: 'Aan de slag',\n                        imageId: null\n                    }\n                ]\n            },\n            paddingTop: { type: 'string', default: '12' },\n            paddingBottom: { type: 'string', default: '12' },\n            titleMarginBottom: { type: 'string', default: '8' },\n            cardBorderRadius: { type: 'string', default: 'lg' },\n            imageBorderRadius: { type: 'string', default: 'none' },\n            shadowStyle: { type: 'string', default: 'md' },\n            hoverShadowStyle: { type: 'string', default: 'lg' }\n        },\n\n        edit: function(props) {\n            const { attributes, setAttributes } = props;\n            const { \n                sectionTitle,\n                backgroundColor,\n                titleColor,\n                cardBackgroundColor,\n                cardTextColor,\n                cardTitleColor,\n                enableHoverEffect,\n                columnsDesktop,\n                columnsTablet,\n                columnsMobile,\n                cardGap,\n                processSteps,\n                paddingTop,\n                paddingBottom,\n                titleMarginBottom,\n                cardBorderRadius,\n                imageBorderRadius,\n                shadowStyle,\n                hoverShadowStyle\n            } = attributes;\n\n            const [selectedStepIndex, setSelectedStepIndex] = useState(null);\n            const [expandedStep, setExpandedStep] = useState(null);\n\n            // SOPHISTICATED helper functions for dynamic styling\n            const getGridColumnsClass = () => {\n                const mobileClass = `grid-cols-${columnsMobile}`;\n                const tabletClass = `sm:grid-cols-${columnsTablet}`;\n                const desktopClass = `lg:grid-cols-${columnsDesktop}`;\n                return `${mobileClass} ${tabletClass} ${desktopClass}`;\n            };\n\n            const getGapClass = () => {\n                return `gap-${cardGap}`;\n            };\n\n            const getPaddingClass = () => {\n                return `py-${paddingTop} pb-${paddingBottom}`;\n            };\n\n            const getTitleMarginClass = () => {\n                return `mb-${titleMarginBottom}`;\n            };\n\n            const getBorderRadiusClass = (type) => {\n                if (type === 'none') return '';\n                return `rounded-${type}`;\n            };\n\n            const getShadowClass = (shadow) => {\n                if (shadow === 'none') return '';\n                return `shadow-${shadow}`;\n            };\n\n            const getHoverShadowClass = () => {\n                if (!enableHoverEffect || hoverShadowStyle === 'none') return '';\n                return `hover:shadow-${hoverShadowStyle}`;\n            };\n\n            // ADVANCED step management functions\n            const updateStep = (index, field, value) => {\n                const newSteps = [...processSteps];\n                newSteps[index] = {\n                    ...newSteps[index],\n                    [field]: value\n                };\n                setAttributes({ processSteps: newSteps });\n            };\n\n            const addStep = () => {\n                const newStepNumber = String(processSteps.length + 1).padStart(2, '0');\n                const newStep = {\n                    id: `step-${Date.now()}`,\n                    stepNumber: newStepNumber,\n                    title: `Step ${newStepNumber}`,\n                    description: 'Enter step description here.',\n                    imageUrl: 'https://images.unsplash.com/photo-1595147389795-37094173bfd8?w=800&h=600&fit=crop',\n                    imageAlt: `Step ${newStepNumber}`,\n                    imageId: null\n                };\n                setAttributes({ processSteps: [...processSteps, newStep] });\n            };\n\n            const removeStep = (index) => {\n                if (processSteps.length <= 1) {\n                    alert(__('You must have at least one step.', 'julianboelen'));\n                    return;\n                }\n                const newSteps = processSteps.filter((_, i) => i !== index);\n                // Renumber steps\n                const renumberedSteps = newSteps.map((step, i) => ({\n                    ...step,\n                    stepNumber: String(i + 1).padStart(2, '0')\n                }));\n                setAttributes({ processSteps: renumberedSteps });\n                if (selectedStepIndex === index) {\n                    setSelectedStepIndex(null);\n                }\n            };\n\n            const moveStep = (index, direction) => {\n                const newIndex = direction === 'up' ? index - 1 : index + 1;\n                if (newIndex < 0 || newIndex >= processSteps.length) return;\n                \n                const newSteps = [...processSteps];\n                [newSteps[index], newSteps[newIndex]] = [newSteps[newIndex], newSteps[index]];\n                \n                // Renumber steps\n                const renumberedSteps = newSteps.map((step, i) => ({\n                    ...step,\n                    stepNumber: String(i + 1).padStart(2, '0')\n                }));\n                \n                setAttributes({ processSteps: renumberedSteps });\n                setSelectedStepIndex(newIndex);\n            };\n\n            const duplicateStep = (index) => {\n                const stepToDuplicate = processSteps[index];\n                const newStep = {\n                    ...stepToDuplicate,\n                    id: `step-${Date.now()}`,\n                    stepNumber: String(processSteps.length + 1).padStart(2, '0')\n                };\n                setAttributes({ processSteps: [...processSteps, newStep] });\n            };\n\n            // PROFESSIONAL editor preview with realistic styling\n            return createElement(Fragment, null,\n                // SOPHISTICATED InspectorControls with multiple panels\n                createElement(InspectorControls, null,\n                    createElement(PanelBody, { \n                        title: __('Section Settings', 'julianboelen'), \n                        initialOpen: true \n                    },\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(TextControl, {\n                                    label: __('Section Title', 'julianboelen'),\n                                    value: sectionTitle,\n                                    onChange: (value) => setAttributes({ sectionTitle: value }),\n                                    help: __('Main heading for the process section', 'julianboelen')\n                                })\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%', marginTop: '15px' } },\n                                createElement(RangeControl, {\n                                    label: __('Top Padding', 'julianboelen'),\n                                    value: parseInt(paddingTop),\n                                    onChange: (value) => setAttributes({ paddingTop: String(value) }),\n                                    min: 0,\n                                    max: 32,\n                                    step: 1\n                                })\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(RangeControl, {\n                                    label: __('Bottom Padding', 'julianboelen'),\n                                    value: parseInt(paddingBottom),\n                                    onChange: (value) => setAttributes({ paddingBottom: String(value) }),\n                                    min: 0,\n                                    max: 32,\n                                    step: 1\n                                })\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(RangeControl, {\n                                    label: __('Title Bottom Margin', 'julianboelen'),\n                                    value: parseInt(titleMarginBottom),\n                                    onChange: (value) => setAttributes({ titleMarginBottom: String(value) }),\n                                    min: 0,\n                                    max: 24,\n                                    step: 1\n                                })\n                            )\n                        )\n                    ),\n                    \n                    createElement(PanelBody, { \n                        title: __('Color Settings', 'julianboelen'), \n                        initialOpen: false \n                    },\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(BaseControl, {\n                                    label: __('Background Color', 'julianboelen')\n                                },\n                                    createElement(ColorPicker, {\n                                        color: backgroundColor,\n                                        onChange: (color) => setAttributes({ backgroundColor: color.hex }),\n                                        disableAlpha: false\n                                    })\n                                )\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%', marginTop: '20px' } },\n                                createElement(BaseControl, {\n                                    label: __('Title Color', 'julianboelen')\n                                },\n                                    createElement(ColorPicker, {\n                                        color: titleColor,\n                                        onChange: (color) => setAttributes({ titleColor: color.hex }),\n                                        disableAlpha: false\n                                    })\n                                )\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%', marginTop: '20px' } },\n                                createElement(BaseControl, {\n                                    label: __('Card Background Color', 'julianboelen')\n                                },\n                                    createElement(ColorPicker, {\n                                        color: cardBackgroundColor,\n                                        onChange: (color) => setAttributes({ cardBackgroundColor: color.hex }),\n                                        disableAlpha: false\n                                    })\n                                )\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%', marginTop: '20px' } },\n                                createElement(BaseControl, {\n                                    label: __('Card Title Color', 'julianboelen')\n                                },\n                                    createElement(ColorPicker, {\n                                        color: cardTitleColor,\n                                        onChange: (color) => setAttributes({ cardTitleColor: color.hex }),\n                                        disableAlpha: false\n                                    })\n                                )\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%', marginTop: '20px' } },\n                                createElement(BaseControl, {\n                                    label: __('Card Text Color', 'julianboelen')\n                                },\n                                    createElement(ColorPicker, {\n                                        color: cardTextColor,\n                                        onChange: (color) => setAttributes({ cardTextColor: color.hex }),\n                                        disableAlpha: false\n                                    })\n                                )\n                            )\n                        )\n                    ),\n                    \n                    createElement(PanelBody, { \n                        title: __('Layout Settings', 'julianboelen'), \n                        initialOpen: false \n                    },\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(RangeControl, {\n                                    label: __('Columns (Desktop)', 'julianboelen'),\n                                    value: columnsDesktop,\n                                    onChange: (value) => setAttributes({ columnsDesktop: value }),\n                                    min: 1,\n                                    max: 6,\n                                    step: 1\n                                })\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(RangeControl, {\n                                    label: __('Columns (Tablet)', 'julianboelen'),\n                                    value: columnsTablet,\n                                    onChange: (value) => setAttributes({ columnsTablet: value }),\n                                    min: 1,\n                                    max: 4,\n                                    step: 1\n                                })\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(RangeControl, {\n                                    label: __('Columns (Mobile)', 'julianboelen'),\n                                    value: columnsMobile,\n                                    onChange: (value) => setAttributes({ columnsMobile: value }),\n                                    min: 1,\n                                    max: 2,\n                                    step: 1\n                                })\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(SelectControl, {\n                                    label: __('Card Gap', 'julianboelen'),\n                                    value: cardGap,\n                                    options: [\n                                        { label: __('Extra Small (0.5rem)', 'julianboelen'), value: '2' },\n                                        { label: __('Small (1rem)', 'julianboelen'), value: '4' },\n                                        { label: __('Medium (1.5rem)', 'julianboelen'), value: '6' },\n                                        { label: __('Large (2rem)', 'julianboelen'), value: '8' },\n                                        { label: __('Extra Large (3rem)', 'julianboelen'), value: '12' }\n                                    ],\n                                    onChange: (value) => setAttributes({ cardGap: value })\n                                })\n                            )\n                        )\n                    ),\n                    \n                    createElement(PanelBody, { \n                        title: __('Card Style Settings', 'julianboelen'), \n                        initialOpen: false \n                    },\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(SelectControl, {\n                                    label: __('Card Border Radius', 'julianboelen'),\n                                    value: cardBorderRadius,\n                                    options: [\n                                        { label: __('None', 'julianboelen'), value: 'none' },\n                                        { label: __('Small', 'julianboelen'), value: 'sm' },\n                                        { label: __('Medium', 'julianboelen'), value: 'md' },\n                                        { label: __('Large', 'julianboelen'), value: 'lg' },\n                                        { label: __('Extra Large', 'julianboelen'), value: 'xl' },\n                                        { label: __('2XL', 'julianboelen'), value: '2xl' },\n                                        { label: __('Full', 'julianboelen'), value: 'full' }\n                                    ],\n                                    onChange: (value) => setAttributes({ cardBorderRadius: value })\n                                })\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(SelectControl, {\n                                    label: __('Image Border Radius', 'julianboelen'),\n                                    value: imageBorderRadius,\n                                    options: [\n                                        { label: __('None', 'julianboelen'), value: 'none' },\n                                        { label: __('Small', 'julianboelen'), value: 'sm' },\n                                        { label: __('Medium', 'julianboelen'), value: 'md' },\n                                        { label: __('Large', 'julianboelen'), value: 'lg' },\n                                        { label: __('Extra Large', 'julianboelen'), value: 'xl' }\n                                    ],\n                                    onChange: (value) => setAttributes({ imageBorderRadius: value })\n                                })\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(SelectControl, {\n                                    label: __('Shadow Style', 'julianboelen'),\n                                    value: shadowStyle,\n                                    options: [\n                                        { label: __('None', 'julianboelen'), value: 'none' },\n                                        { label: __('Small', 'julianboelen'), value: 'sm' },\n                                        { label: __('Medium', 'julianboelen'), value: 'md' },\n                                        { label: __('Large', 'julianboelen'), value: 'lg' },\n                                        { label: __('Extra Large', 'julianboelen'), value: 'xl' },\n                                        { label: __('2XL', 'julianboelen'), value: '2xl' }\n                                    ],\n                                    onChange: (value) => setAttributes({ shadowStyle: value })\n                                })\n                            )\n                        ),\n                        createElement(PanelRow, null,\n                            createElement(ToggleControl, {\n                                label: __('Enable Hover Effect', 'julianboelen'),\n                                checked: enableHoverEffect,\n                                onChange: (value) => setAttributes({ enableHoverEffect: value }),\n                                help: __('Add shadow effect on card hover', 'julianboelen')\n                            })\n                        ),\n                        enableHoverEffect && createElement(PanelRow, null,\n                            createElement('div', { style: { width: '100%' } },\n                                createElement(SelectControl, {\n                                    label: __('Hover Shadow Style', 'julianboelen'),\n                                    value: hoverShadowStyle,\n                                    options: [\n                                        { label: __('None', 'julianboelen'), value: 'none' },\n                                        { label: __('Small', 'julianboelen'), value: 'sm' },\n                                        { label: __('Medium', 'julianboelen'), value: 'md' },\n                                        { label: __('Large', 'julianboelen'), value: 'lg' },\n                                        { label: __('Extra Large', 'julianboelen'), value: 'xl' },\n                                        { label: __('2XL', 'julianboelen'), value: '2xl' }\n                                    ],\n                                    onChange: (value) => setAttributes({ hoverShadowStyle: value })\n                                })\n                            )\n                        )\n                    ),\n                    \n                    createElement(PanelBody, { \n                        title: __('Process Steps', 'julianboelen'), \n                        initialOpen: true \n                    },\n                        createElement('div', { style: { marginBottom: '15px' } },\n                            createElement(Button, {\n                                variant: 'primary',\n                                onClick: addStep,\n                                style: { width: '100%' }\n                            }, __('+ Add New Step', 'julianboelen'))\n                        ),\n                        processSteps.map((step, index) => \n                            createElement('div', {\n                                key: step.id,\n                                style: {\n                                    marginBottom: '15px',\n                                    padding: '15px',\n                                    border: selectedStepIndex === index ? '2px solid #2271b1' : '1px solid #ddd',\n                                    borderRadius: '4px',\n                                    backgroundColor: selectedStepIndex === index ? '#f0f6fc' : '#fff'\n                                }\n                            },\n                                createElement('div', {\n                                    style: {\n                                        display: 'flex',\n                                        justifyContent: 'space-between',\n                                        alignItems: 'center',\n                                        marginBottom: '10px',\n                                        cursor: 'pointer'\n                                    },\n                                    onClick: () => setExpandedStep(expandedStep === index ? null : index)\n                                },\n                                    createElement('strong', null, `${step.stepNumber}. ${step.title || __('Untitled Step', 'julianboelen')}`),\n                                    createElement('span', {\n                                        style: { fontSize: '18px' }\n                                    }, expandedStep === index ? '▼' : '▶')\n                                ),\n                                expandedStep === index && createElement(Fragment, null,\n                                    createElement('div', { style: { marginBottom: '10px' } },\n                                        createElement(TextControl, {\n                                            label: __('Step Number', 'julianboelen'),\n                                            value: step.stepNumber,\n                                            onChange: (value) => updateStep(index, 'stepNumber', value)\n                                        })\n                                    ),\n                                    createElement('div', { style: { marginBottom: '10px' } },\n                                        createElement(TextControl, {\n                                            label: __('Step Title', 'julianboelen'),\n                                            value: step.title,\n                                            onChange: (value) => updateStep(index, 'title', value)\n                                        })\n                                    ),\n                                    createElement('div', { style: { marginBottom: '10px' } },\n                                        createElement(TextareaControl, {\n                                            label: __('Step Description', 'julianboelen'),\n                                            value: step.description,\n                                            onChange: (value) => updateStep(index, 'description', value),\n                                            rows: 3\n                                        })\n                                    ),\n                                    createElement('div', { style: { marginBottom: '10px' } },\n                                        createElement(BaseControl, {\n                                            label: __('Step Image', 'julianboelen')\n                                        },\n                                            createElement(MediaUploadCheck, null,\n                                                createElement(MediaUpload, {\n                                                    onSelect: (media) => {\n                                                        updateStep(index, 'imageUrl', media.url);\n                                                        updateStep(index, 'imageId', media.id);\n                                                        updateStep(index, 'imageAlt', media.alt || step.title);\n                                                    },\n                                                    allowedTypes: ['image'],\n                                                    value: step.imageId,\n                                                    render: ({ open }) => createElement('div', null,\n                                                        step.imageUrl && createElement('img', {\n                                                            src: step.imageUrl,\n                                                            alt: step.imageAlt,\n                                                            style: {\n                                                                width: '100%',\n                                                                height: 'auto',\n                                                                marginBottom: '10px',\n                                                                borderRadius: '4px'\n                                                            }\n                                                        }),\n                                                        createElement('div', {\n                                                            style: {\n                                                                display: 'flex',\n                                                                gap: '10px'\n                                                            }\n                                                        },\n                                                            createElement(Button, {\n                                                                onClick: open,\n                                                                variant: step.imageUrl ? 'secondary' : 'primary'\n                                                            }, step.imageUrl ? __('Replace Image', 'julianboelen') : __('Select Image', 'julianboelen')),\n                                                            step.imageUrl && createElement(Button, {\n                                                                onClick: () => {\n                                                                    updateStep(index, 'imageUrl', '');\n                                                                    updateStep(index, 'imageId', null);\n                                                                },\n                                                                variant: 'secondary',\n                                                                isDestructive: true\n                                                            }, __('Remove', 'julianboelen'))\n                                                        )\n                                                    )\n                                                })\n                                            )\n                                        )\n                                    ),\n                                    createElement('div', { style: { marginBottom: '10px' } },\n                                        createElement(TextControl, {\n                                            label: __('Image Alt Text', 'julianboelen'),\n                                            value: step.imageAlt,\n                                            onChange: (value) => updateStep(index, 'imageAlt', value),\n                                            help: __('Describe the image for accessibility', 'julianboelen')\n                                        })\n                                    ),\n                                    createElement('div', {\n                                        style: {\n                                            display: 'flex',\n                                            gap: '8px',\n                                            flexWrap: 'wrap',\n                                            marginTop: '15px',\n                                            paddingTop: '15px',\n                                            borderTop: '1px solid #ddd'\n                                        }\n                                    },\n                                        createElement(Button, {\n                                            variant: 'secondary',\n                                            onClick: () => moveStep(index, 'up'),\n                                            disabled: index === 0,\n                                            size: 'small'\n                                        }, __('↑ Move Up', 'julianboelen')),\n                                        createElement(Button, {\n                                            variant: 'secondary',\n                                            onClick: () => moveStep(index, 'down'),\n                                            disabled: index === processSteps.length - 1,\n                                            size: 'small'\n                                        }, __('↓ Move Down', 'julianboelen')),\n                                        createElement(Button, {\n                                            variant: 'secondary',\n                                            onClick: () => duplicateStep(index),\n                                            size: 'small'\n                                        }, __('Duplicate', 'julianboelen')),\n                                        createElement(Button, {\n                                            variant: 'secondary',\n                                            onClick: () => removeStep(index),\n                                            isDestructive: true,\n                                            size: 'small'\n                                        }, __('Remove', 'julianboelen'))\n                                    )\n                                )\n                            )\n                        )\n                    )\n                ),\n                \n                // PROFESSIONAL editor preview\n                createElement('section', { \n                    ...useBlockProps({\n                        className: `section-process-block w-full px-4 sm:px-6 lg:px-8 ${getPaddingClass()}`,\n                        style: { \n                            backgroundColor: backgroundColor,\n                            border: '2px dashed #ccc'\n                        }\n                    })\n                },\n                    createElement('div', { className: 'max-w-7xl mx-auto' },\n                        createElement(RichText, {\n                            tagName: 'h2',\n                            className: `text-3xl sm:text-4xl lg:text-5xl font-bold ${getTitleMarginClass()}`,\n                            style: { color: titleColor },\n                            value: sectionTitle,\n                            onChange: (value) => setAttributes({ sectionTitle: value }),\n                            placeholder: __('Enter section title...', 'julianboelen')\n                        }),\n                        \n                        createElement('div', {\n                            className: `grid ${getGridColumnsClass()} ${getGapClass()}`\n                        },\n                            processSteps.map((step, index) => \n                                createElement('div', {\n                                    key: step.id,\n                                    className: `${getBorderRadiusClass(cardBorderRadius)} ${getShadowClass(shadowStyle)} ${getHoverShadowClass()} overflow-hidden transition-shadow duration-300`,\n                                    style: {\n                                        backgroundColor: cardBackgroundColor,\n                                        cursor: 'pointer',\n                                        border: selectedStepIndex === index ? '2px solid #2271b1' : 'none'\n                                    },\n                                    onClick: () => {\n                                        setSelectedStepIndex(index);\n                                        setExpandedStep(index);\n                                    }\n                                },\n                                    createElement('div', {\n                                        className: `aspect-[4/3] overflow-hidden ${getBorderRadiusClass(imageBorderRadius)}`\n                                    },\n                                        step.imageUrl && createElement('img', {\n                                            src: step.imageUrl,\n                                            alt: step.imageAlt,\n                                            className: 'w-full h-full object-cover',\n                                            loading: 'lazy'\n                                        })\n                                    ),\n                                    createElement('div', { className: 'p-6' },\n                                        createElement('h3', {\n                                            className: 'text-xl font-bold mb-3',\n                                            style: { color: cardTitleColor }\n                                        }, `${step.stepNumber}. ${step.title}`),\n                                        createElement('p', {\n                                            className: 'leading-relaxed',\n                                            style: { color: cardTextColor }\n                                        }, step.description)\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            );\n        },\n\n        save: function() {\n            return null; // Server-side rendering\n        }\n    });\n})();"
}